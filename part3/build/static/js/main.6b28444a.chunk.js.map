{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","then","response","data","length","notesToShow","filter","map","find","n","changedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4LACMA,EAAU,aAQD,EANA,kBAAMC,IAAMC,IAAIF,IAMhB,EAJA,SAACG,GAAD,OAAeF,IAAMG,KAAKJ,EAASG,IAInC,EAFA,SAACE,EAAIF,GAAL,OAAmBF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,ICMjDI,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCI3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKJ,UAAU,QAAf,SACGI,KCOQC,EAdA,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GC0FSC,EA7FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAgBhBC,qBAVa,WACXC,QAAQC,IAAI,UAOZC,IAAqBC,MALA,SAAAC,GACnBJ,QAAQC,IAAI,sBACZT,EAASY,EAASC,WAKN,IAEhBL,QAAQC,IAAI,SAAUV,EAAMe,OAAQ,SAEpC,IAyCMC,EAAcZ,EAChBJ,EACAA,EAAMiB,QAAO,SAAAjC,GAAI,OAAuB,IAAnBA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASc,IACvB,8BACE,yBAAQhB,QAAS,kBAAMe,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGY,EAAYE,KAAI,SAAAlC,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA1CD,SAACJ,GAC1B,IAAMG,EAAOgB,EAAMmB,MAAK,SAAAC,GAAC,OAAIA,EAAEvC,KAAOA,KAChCwC,EAAW,2BAAQrC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDwB,EACU9B,EAAIwC,GACXT,MAAK,SAAAC,GACJZ,EAASD,EAAMkB,KAAI,SAAAlC,GAAI,OAAIA,EAAKH,KAAOA,EAAKG,EAAO6B,EAASC,YAE7DQ,OAAM,SAAAC,GACLhB,EAAgB,SAAD,OACJvB,EAAKK,QADD,sCAGfmC,YAAW,WACTjB,EAAgB,QACf,QA2ByBkB,CAAmBzC,EAAKH,MAF3CG,EAAKH,SAOhB,uBAAM6C,SAhEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBxC,QAASa,EACT4B,MAAM,IAAIC,MAAOC,cACjB7C,UAAW8C,KAAKC,SAAW,GAC3BrD,GAAImB,EAAMe,OAAS,GAGrBJ,EACUkB,GACPjB,MAAK,SAAAC,GACJZ,EAASY,EAASC,MAClBX,EAAW,qBAmDb,UACE,uBAAOgC,MAAOjC,EAASkC,SA7BJ,SAACT,GACxBlB,QAAQC,IAAIiB,EAAMU,OAAOF,OACzBhC,EAAWwB,EAAMU,OAAOF,UA4BpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCxFNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6b28444a.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => axios.get(baseUrl)\n\nconst create = (newObject) => axios.post(baseUrl, newObject)\n\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject)\n\nexport default {\n  getAll,\n  create,\n  update\n}\n","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n  \n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","const Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","const Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div> \n  )\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  const hook = () => {\n    console.log('effect')\n\n    const eventHandler = response => {\n      console.log('promise fullfilled')\n      setNotes(response.data)\n    }\n\n    noteService.getAll().then(eventHandler)\n  }\n  useEffect(hook, [])\n\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n\n    noteService \n      .create(noteObject)\n      .then(response => {\n        setNotes(response.data)\n        setNewNote('a new note...')\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response.data))\n      })\n      .catch(err => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}